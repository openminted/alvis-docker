<alvisnlp-plan id="tomap-on-phenotypes">
  
  <!-- ToMap on lemmas -->
  <module id="tomap" class="TomapProjector">
    <yateaFile inhibitCheck="true">&outdir;/yatea/corpus/default/xml/candidates.xml</yateaFile>
    <targetLayerName>phenotypes</targetLayerName>
    <conceptFeature>concept-id</conceptFeature>
    <explanationFeaturePrefix>explain_</explanationFeaturePrefix>
    <tomapClassifier whole-proxy-distance="false" empty-words="resources/stopwords_EN.ttg">resources/OntoBiotope-Phenotype.tomap</tomapClassifier>
    <lemmaKeys/>
    <subject layer="words" feature="lemma"/>
    <scoreFeature>score</scoreFeature>
  </module>

  <module id="concept-names" class="OBOMapper">
    <oboFiles>resources/OntoBiotope-Phenotype.obo</oboFiles>
    <idKeys/>
    <target>documents.sections.layer:phenotypes</target>
    <form>@concept-id</form>
    <nameFeature>concept-name</nameFeature>
    <pathFeature>concept-path</pathFeature>
  </module>

  <!-- Repeat ToMap using "customized" lemmas -->
  <sequence id="tomap-on-alternative-lemmas">

    <module id="tomap" class="TomapProjector">
      <yateaFile inhibitCheck="true">&outdir;/yatea/corpus/default/xml/candidates.xml</yateaFile>
      <targetLayerName>phenotypes2</targetLayerName>
      <conceptFeature>concept-id</conceptFeature>
      <explanationFeaturePrefix>explain_</explanationFeaturePrefix>
      <tomapClassifier whole-proxy-distance="false" empty-words="resources/stopwords_EN.ttg">resources/OntoBiotope-Phenotype.tomap</tomapClassifier>
      <lemmaKeys/>
      <subject layer="words" feature="lemma2"/>
      <scoreFeature>score</scoreFeature>
    </module>

    <module id="concept-names" class="OBOMapper">
      <oboFiles>resources/OntoBiotope-Phenotype.obo</oboFiles>
      <idKeys/>
      <target>documents.sections.layer:phenotypes2</target>
      <form>@concept-id</form>
      <nameFeature>concept-name</nameFeature>
      <pathFeature>concept-path</pathFeature>
    </module>

    <!-- Add only those that are not already in layer 'phenotypes'-->
    <module id="add-phenotypes" class="Action">
      <target>documents.sections.layer:phenotypes2[not span:phenotypes]</target>
      <action>add:phenotypes</action>
      <addToLayer/>
    </module>

  </sequence>

  <!-- Repeat ToMap without lemmaKeys option -->
  <sequence id="tomap-no-lemmakeys">

    <module id="tomap" class="TomapProjector">
      <yateaFile inhibitCheck="true">&outdir;/yatea/corpus/default/xml/candidates.xml</yateaFile>
      <targetLayerName>phenotypes3</targetLayerName>
      <conceptFeature>concept-id</conceptFeature>
      <explanationFeaturePrefix>explain_</explanationFeaturePrefix>
      <tomapClassifier whole-proxy-distance="false" empty-words="resources/stopwords_EN.ttg">resources/OntoBiotope-Phenotype.tomap</tomapClassifier>
      <subject layer="words" feature="lemma"/>
      <scoreFeature>score</scoreFeature>
    </module>

    <module id="concept-names" class="OBOMapper">
      <oboFiles>resources/OntoBiotope-Phenotype.obo</oboFiles>
      <idKeys/>
      <target>documents.sections.layer:phenotypes3</target>
      <form>@concept-id</form>
      <nameFeature>concept-name</nameFeature>
      <pathFeature>concept-path</pathFeature>
    </module>

    <!-- Add only those that are not already in layer 'phenotypes'-->
    <module id="add-phenotypes" class="Action">
      <target>documents.sections.layer:phenotypes3[not span:phenotypes]</target>
      <action>add:phenotypes</action>
      <addToLayer/>
    </module>

  </sequence>


  <!-- Repeat ToMap on variants -->
  <sequence id="tomap-on-variants">

    <module id="tomap" class="TomapProjector">
      <yateaFile inhibitCheck="true">&outdir;/yatea-var/corpus/default/xml/candidates.xml</yateaFile>
      <targetLayerName>phenotypes4</targetLayerName>
      <conceptFeature>concept-id</conceptFeature>
      <explanationFeaturePrefix>explain_</explanationFeaturePrefix>
      <tomapClassifier whole-proxy-distance="false" empty-words="resources/stopwords_EN.ttg">resources/OntoBiotope-Phenotype.tomap</tomapClassifier>
      <lemmaKeys/>
      <subject layer="words" feature="variant"/>
      <scoreFeature>score</scoreFeature>
    </module>

    <module id="concept-names" class="OBOMapper">
      <oboFiles>resources/OntoBiotope-Phenotype.obo</oboFiles>
      <idKeys/>
      <target>documents.sections.layer:phenotypes4</target>
      <form>@concept-id</form>
      <nameFeature>concept-name</nameFeature>
      <pathFeature>concept-path</pathFeature>
    </module>

    <!-- Add only those that are not already in layer 'phenotypes'-->
    <module id="add-phenotypes" class="Action">
      <target>documents.sections.layer:phenotypes4[not span:phenotypes]</target>
      <action>add:phenotypes</action>
      <addToLayer/>
    </module>

  </sequence>

  <!-- Repeat ToMap on words without lemmaKeys option -->
  <sequence id="tomap-no-lemmakeys-word-form">

    <module id="tomap" class="TomapProjector">
      <yateaFile inhibitCheck="true">&outdir;/yatea/corpus/default/xml/candidates.xml</yateaFile>
      <targetLayerName>phenotypes5</targetLayerName>
      <conceptFeature>concept-id</conceptFeature>
      <explanationFeaturePrefix>explain_</explanationFeaturePrefix>
      <tomapClassifier whole-proxy-distance="false" empty-words="resources/stopwords_EN.ttg">resources/OntoBiotope-Phenotype.tomap</tomapClassifier>
      <subject layer="words" feature="form"/>
      <scoreFeature>score</scoreFeature>
    </module>

    <module id="concept-names" class="OBOMapper">
      <oboFiles>resources/OntoBiotope-Phenotype.obo</oboFiles>
      <idKeys/>
      <target>documents.sections.layer:phenotypes5</target>
      <form>@concept-id</form>
      <nameFeature>concept-name</nameFeature>
      <pathFeature>concept-path</pathFeature>
    </module>

    <!-- Add only those that are not already in layer 'phenotypes'-->
    <module id="add-phenotypes" class="Action">
      <target>documents.sections.layer:phenotypes5[not span:phenotypes]</target>
      <action>add:phenotypes</action>
      <addToLayer/>
    </module>

  </sequence>

  <!-- Postprocessing  -->

<!-- Remove entities with certain characters -->
  <module id="delete-char" class="Action">
    <target>documents.sections.layer:phenotypes[@form =~ "^[~\\#\\*\\%\\u00D7=]" or @form =~ "\\#\\d+$" or @form =~ "\\-\\-" or start == overlapping:units{0}.start]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>

 <module id="delete-unbalanced-parenthesis" class="Action">
    <target>documents.sections.layer:habitats[@form =~ "^[^\\(]*\\([^\\)]+$"]</target>
    <action>remove:habitats</action>
    <removeFromLayer/>
  </module>

  <!-- Projet BioYatea results -->
  <module id="bioyatea-projection" class="YateaProjector">
    <targetLayerName>yateaTerms</targetLayerName>
    <!--<yateaFile inhibitCheck="true">words_prepro/default/xml/candidates_pp.xml</yateaFile>-->
    <yateaFile inhibitCheck="yes">&outdir;/yatea/corpus/default/xml/candidates.xml</yateaFile> <!-- ??? -->
    <subject layer="words"/>
  </module>

  <!-- Generate lemmatized string for predicted phenotypes and for yatea terms-->
  <module id="get-lemmas-for-predicted-phenotypes" class="Action">
    <target>documents.sections.layer:phenotypes</target>
    <action>set:feat:lemma-string(str:join(overlapping:words[start != target.end],@lemma," "))</action>
    <setFeatures/>
  </module>
  <module id="get-lemmas-for-yateaTerms" class="Action">
    <target>documents.sections.layer:yateaTerms</target>
    <action>set:feat:lemma-string(str:join(overlapping:words[start != target.end],@lemma," "))</action>
    <setFeatures/>
  </module>

  <syntactic-heads>
    <!-- Get head id and (lemmatized) string for predicted phenotypes -->
    <module id="get-head-id" class="Action">
      <target>documents.sections.layer:phenotypes</target>
      <action>set:feat:head-id(span:yateaTerms.@head)</action>
      <setFeatures/>
    </module>
    <module id="get-full-head" class="Action">
      <target>documents.sections.layer:phenotypes</target>
      <action>set:feat:full-head(overlapping:yateaTerms[@term-id == target.@head-id].@lemma-string)</action>
      <setFeatures/>
    </module>

    <!-- Get single-word syntactic head -->
    <module id="get-mono-head" class="Action">
      <target>documents.sections.layer:phenotypes</target>
      <action>set:feat:head(span:yateaTerms.@mono-head)</action>
      <setFeatures/>
    </module>
    <module id="get-mono-head2" class="Action">
      <target>documents.sections.layer:phenotypes[@head == ""]</target>
      <action>set:feat:head(@head-id)</action>
      <setFeatures/>
    </module>
    <module id="get-mono-head-string" class="Action">
      <target>documents.sections.layer:phenotypes</target>
      <action>set:feat:head-string(overlapping:yateaTerms[@term-id == target.@head].@lemma-string)</action>
      <setFeatures/>
    </module>
  </syntactic-heads>

  <!-- Tag terms that fully include their mapped concept -->
  <module id="inclusion" class="Action">
    <target>documents.sections.layer:phenotypes</target>
    <action>set:feat:included(@full-head != "" and (@concept-name == @full-head or @explain_concept-synonym == @full-head))</action>
    <setFeatures/>
  </module>

 <!-- Remove terms with blacklisted syntactic heads -->
  <module id="delete-blacklisted-heads" class="Action">
    <target>documents.sections.layer:phenotypes[@explain_significant-head in "resources/blacklisted-phenotype-heads.txt" and not (@concept-name =~ " " and (@lemma-string ?= @concept-name or @score == "1.0"))]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>

<!-- Choose a concept when multiple concepts have been mapped to a term -->

  <sequence id="choose-candidate">
    <!-- 1. Keep only the highest scored concepts -->
    <module id="keep-highest-score" class="Action">
      <target>documents.sections.layer:phenotypes</target>
      <action>set:feat:highest(not span:phenotypes[@score > target.@score])</action>
      <setFeatures/>
    </module>
    <!-- 2. Select candidates which (lemmatized) string matches a concept preferred name as opposed to those that match a concept synonym (this is for disambiguation of exact matches only)-->
    <module id="select-one-candidate-1" class="Action">
      <target>documents.sections.layer:phenotypes[@highest == "true"]</target>
      <action>set:feat:selected1(@lemma-string == @concept-name or not span:phenotypes[@highest == "true" and @lemma-string == @concept-name])</action>
      <setFeatures/>
    </module>
    <!-- 3. Lexical inclusion : select in priority concepts that are included in the extracted habitat -->
    <module id="select-included" class="Action">
      <target>documents.sections.layer:phenotypes[@selected1 == "true"]</target>
      <action>set:feat:selected2(@included == "true" or not span:phenotypes[@selected1 == "true" and @included == "true"])</action>
      <setFeatures/>
    </module>
   <!-- 5. Select most generic candidate -->
  <module id="select-generic" class="Action">
    <target>documents.sections.layer:phenotypes[@selected2 == "true"]</target>
    <action>set:feat:selected3(not span:phenotypes[@selected2 == "true" and str:len(target.@concept-path) > str:len(@concept-path)])</action>
    <setFeatures/>
  </module>
    <!-- 4. Random : sort the candidates and choose the first one-->
    <module id="temp-id" class="Action">
      <target>documents.sections</target>
      <action>id:enumerate:tempid(sort:sval(layer:phenotypes[@selected3 == "true"],@concept-name))</action>
      <setFeatures/>
    </module>
    <module id="select-one-candidate" class="Action">
      <target>documents.sections.layer:phenotypes[@selected3 == "true"]</target>
      <action>set:feat:selected(not span:phenotypes[@selected3 == "true" and target.@tempid > @tempid])</action>
      <setFeatures/>
    </module>
  <!-- delete not selected -->
  <module id="delete-not-selected" class="Action">
    <target>documents.sections.layer:phenotypes[not @selected == "true"]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>
  </sequence>

  <!-- Filtering of embedded terms -->

  <filter-embedded>
    <!-- remove terms nested in terms mapped with a more specific concept -->
    <sequence id="remove-embedded-generic">
      <module id="keep" class="Action">
	<target>documents.sections.layer:phenotypes[@selected == "true"]</target>
	<action>set:feat:no-parent(not outside:phenotypes[@selected == "true" and @concept-path ?= target.@concept-id])</action>
	<setFeatures/>
      </module>
      <module id="delete" class="Action">
	<target>documents.sections.layer:phenotypes[@no-parent == "false"]</target>
	<action>delete</action>
	<deleteElements/>
      </module>
    </sequence>

    <!-- remove terms nested in terms with the same (significant) head -->
    <sequence id="remove-embedded-in-term-with-same-significant-head">
      <module id="keep" class="Action">
	<target>documents.sections.layer:phenotypes[@selected == "true"]</target>
	<action>set:feat:diff-head(not outside:phenotypes[@selected == "true" and @explain_significant-head == target.@explain_significant-head and not @explain_significant-head == ""])</action>
	<setFeatures/>
      </module>
      <module id="delete" class="Action">
	<target>documents.sections.layer:phenotypes[@diff-head == "false"]</target>
	<action>delete</action>
	<deleteElements/>
      </module>
    </sequence>

    <!-- remove terms nested in terms with the same (mono-word) head -->
    <sequence id="remove-embedded-in-term-with-same-head">
      <module id="keep" class="Action">
	<target>documents.sections.layer:phenotypes[@selected == "true"]</target>
	<action>set:feat:diff-head(not outside:phenotypes[@selected == "true" and @head == target.@head and not @head == ""])</action>
	<setFeatures/>
      </module>
      <module id="delete" class="Action">
	<target>documents.sections.layer:phenotypes[@diff-head != "true"]</target>
	<action>delete</action>
	<deleteElements/>
      </module>
    </sequence>

  </filter-embedded>

  <!-- remove blacklisted terms -->
  <module id="delete-blacklisted" class="Action">
    <target>documents.sections.layer:phenotypes[@selected == "true" and @lemma-string in "resources/phenotype_blacklist.txt"]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>

  <!-- remove single-word terms with certain POS -->
  <module id="delete-POS-tags" class="Action">
    <target>documents.sections.layer:phenotypes[@selected == "true" and span:words.@tt_pos =~ "(VVN|VVZ|VVD|VVP)"]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>

  <!-- remove terms with scores under a certain threshold (0.15) -->
  <module id="delete-low-score" class="Action">
    <target>documents.sections.layer:phenotypes[@selected == "true" and 0.15 > @score]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>

  <!-- remove conjugating when term is not ending in "ing" -->
  <module id="delete-conjugate" class="Action">
    <target>documents.sections.layer:phenotypes[@selected == "true" and @concept-name == "conjugating" and not @form =~ "ing$"]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>

  <!-- Deal with abbreviations -->

  <module id="get-concept-id-for-abbreviations" class="Action">
    <target>documents.sections.layer:short-forms[not outside:words]</target>
    <action>set:feat:concept-id(str:join:'|'(sort:nsval(tuples:abbreviations:short-form.args:long-form.span:phenotypes[@selected == "true"],@concept-id),@concept-id)) | set:feat:score(str:join:'|'(sort:nsval(tuples:abbreviations:short-form.args:long-form.span:phenotypes[@selected == "true"],@concept-id), @score)) | set:feat:concept-name(str:join:'|'(sort:nsval(tuples:abbreviations:short-form.args:long-form.span:phenotypes[@selected == "true"],@concept-id),@concept-name))</action>
    <setFeatures/>
  </module>
  <module id="remove-abb" class="Action">
    <target>documents.sections.layer:phenotypes[span:short-forms[not @concept-id == "" and not @concept-id =~ "^OBT"]]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>
  <module id="add-abb" class="Action">
    <target>documents.sections.layer:short-forms[not @concept-id == "" and not @concept-id =~ "^OBT"]</target>
    <action>set:feat:selected("true") | add:phenotypes</action>
    <addToLayer/>
    <setFeatures/>
  </module>

  <!-- remove terms tag with generic concept "phenotype" -->

  <module id="delete-generic-phenotypes" class="Action">
    <target>documents.sections.layer:phenotypes[@selected == "true" and @concept-id == "MoPh:00000520"]</target>
    <action>remove:phenotypes</action>
    <removeFromLayer/>
  </module>

  <!-- add modifiers occurring before microorganisms -->
   <bacteria-modifier class="PatternMatcher">
      <pattern>
   	[not @form == "-" ]
   	(modifier: [ @tt_pos == "JJ" and not overlapping:phenotypes and not overlapping:habitats and @lemma =~ "ic$"]+ )
   	[outside:microorganism]+
      </pattern>
      <actions>
   	<createAnnotation group="modifier" layer="phenotypes" features='ne-type="Phenotype",concept-id="MoPh:00000520"'/>
      </actions>
    </bacteria-modifier>

<!-- Add concept-path in case some are missing -->
    <module id="concept-path" class="OBOMapper">
      <oboFiles>resources/OntoBiotope-Phenotype.obo</oboFiles>
      <idKeys/>
      <target>documents.sections.layer:phenotypes</target>
      <form>@concept-id</form>
      <nameFeature>concept-name</nameFeature>
      <pathFeature>concept-path</pathFeature>
    </module>


</alvisnlp-plan>




