#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Mar 13 15:53:54 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./configure.py
match_max 100000
expect -exact "================================ Configure TEES ================================\r
Welcome to using the Turku Event Extraction System (TEES)! In order to work,\r
TEES depends on a number of other programs, which have to be set up before use.\r
\r
The classifier (1) is required for all uses of the system. The models (2) are\r
required for predicting events and together with the preprocessing tools (4) can\r
be used on any unprocessed text. The corpora (3) are used for testing the\r
performance of a model or for training a new model.\r
\r
If you are unsure which components you need, just install everything (the\r
default choice). You can also rerun configure.py at any time later to install\r
missing components.\r
\r
To make a choice, type the option's key and press enter, or just press enter for\r
the default option. The '*' sign indicates the default option and brackets a\r
selectable one.\r
--------------------------------------------------------------------------------\r
\[X\] 1) Install classifier (SVM Multiclass)\r
\[X\] 2) Install models (TEES models for BioNLP'09-13 and DDI'11-13)\r
\[X\] 3) Install corpora (BioNLP'09-13 and DDI'11-13)\r
\[X\] 4) Install preprocessing tools (BANNER, BLLIP parser etc)\r
 *  c) Continue and install selected items\r
    q) Quit\r
================================================================================\r
>"
send -- "2\r"
expect -exact "================================ Configure TEES ================================\r
Welcome to using the Turku Event Extraction System (TEES)! In order to work,\r
TEES depends on a number of other programs, which have to be set up before use.\r
\r
The classifier (1) is required for all uses of the system. The models (2) are\r
required for predicting events and together with the preprocessing tools (4) can\r
be used on any unprocessed text. The corpora (3) are used for testing the\r
performance of a model or for training a new model.\r
\r
If you are unsure which components you need, just install everything (the\r
default choice). You can also rerun configure.py at any time later to install\r
missing components.\r
\r
To make a choice, type the option's key and press enter, or just press enter for\r
the default option. The '*' sign indicates the default option and brackets a\r
selectable one.\r
--------------------------------------------------------------------------------\r
\[X\] 1) Install classifier (SVM Multiclass)\r
\[ \] 2) Install models (TEES models for BioNLP'09-13 and DDI'11-13)\r
\[X\] 3) Install corpora (BioNLP'09-13 and DDI'11-13)\r
\[X\] 4) Install preprocessing tools (BANNER, BLLIP parser etc)\r
 *  c) Continue and install selected items\r
    q) Quit\r
================================================================================\r
>"
send -- "3\r"
expect -exact "================================ Configure TEES ================================\r
Welcome to using the Turku Event Extraction System (TEES)! In order to work,\r
TEES depends on a number of other programs, which have to be set up before use.\r
\r
The classifier (1) is required for all uses of the system. The models (2) are\r
required for predicting events and together with the preprocessing tools (4) can\r
be used on any unprocessed text. The corpora (3) are used for testing the\r
performance of a model or for training a new model.\r
\r
If you are unsure which components you need, just install everything (the\r
default choice). You can also rerun configure.py at any time later to install\r
missing components.\r
\r
To make a choice, type the option's key and press enter, or just press enter for\r
the default option. The '*' sign indicates the default option and brackets a\r
selectable one.\r
--------------------------------------------------------------------------------\r
\[X\] 1) Install classifier (SVM Multiclass)\r
\[ \] 2) Install models (TEES models for BioNLP'09-13 and DDI'11-13)\r
\[ \] 3) Install corpora (BioNLP'09-13 and DDI'11-13)\r
\[X\] 4) Install preprocessing tools (BANNER, BLLIP parser etc)\r
 *  c) Continue and install selected items\r
    q) Quit\r
================================================================================\r
>"
send -- "c\r"
expect -exact "============================== Install Directory ==============================\r
1. By default, all data and tools will be installed to one directory, the\r
DATAPATH. You can later set the installation directory individually for each\r
component, or you can change the default path now.\r
\r
2. TEES reads its configuration from a file defined by the environment variable\r
\"TEES_SETTINGS\". This environment variable must be set, and point to a\r
configuration file for TEES to work. By editing this configuration file you can\r
configure TEES in addition (or instead of) using this configuration program.\r
\r
The \"TEES_SETTINGS\" environment variable is not set, so a new local\r
configuration file will be created.\r
--------------------------------------------------------------------------------\r
    1) Change DATAPATH (/home/mba/.tees)\r
    2) Change TEES_SETTINGS (/home/mba/.tees_local_settings.py)\r
 *  c) Continue\r
================================================================================\r
>"
send -- "c\r"
expect -exact "================================== Classifier ==================================\r
TEES uses the SVM Multiclass classifer by Thorsten Joachims for all\r
classification tasks. You can optionally choose to compile it from source if the\r
precompiled Linux-binary does not work on your system.\r
--------------------------------------------------------------------------------\r
\[ \] 1) Compile from source\r
 *  i) Install\r
    s) Skip\r
================================================================================\r
>"
send -- "i\r"
expect -exact "==================================== Tools ====================================\r
The tools are required for processing unannotated text and can be used as part\r
of TEES, or independently through their wrappers. For information and usage\r
conditions, see https://github.com/jbjorne/TEES/wiki/Licenses. Some of the tools\r
need to be compiled from source, this will take a while.\r
\r
The external tools used by TEES are:\r
\r
The GENIA Sentence Splitter of Tokyo University (Tsuruoka Y. et. al.)\r
\r
The BANNER named entity recognizer by Robert Leaman et. al.\r
\r
The BLLIP parser of Brown University (Charniak E., Johnson M. et. al.)\r
\r
The Stanford Parser of the Stanford Natural Language Processing Group\r
--------------------------------------------------------------------------------\r
\[ \] 1) Redownload already downloaded files\r
\r
\[X\] 2) Install GENIA Sentence Splitter\r
\[X\] 3) Install BANNER named entity recognizer\r
\[X\] 4) Install BLLIP parser\r
\[X\] 5) Install Stanford Parser\r
\r
 *  i) Install\r
    s) Skip\r
================================================================================\r
>"
send -- "i\r"
expect eof
